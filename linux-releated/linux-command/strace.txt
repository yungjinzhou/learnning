strace常用来跟踪进程执行时的系统调用和所接收的信号。 
在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通 过系统调用访问硬件设备。
strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。




每一行都是一条系统调用，等号左边是系统调用的函数名及其参数，右边是该调用的返回值。


strace 显示这些调用的参数并返回符号形式的值。strace 从内核接收信息，而且不需要以任何特殊的方式来构建内核。


strace参数


-c 统计每一系统调用的所执行的时间,次数和出错的次数等. 

-d 输出strace关于标准错误的调试信息. 

-f 跟踪由fork调用所产生的子进程. 

-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号.

-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪. 

-h 输出简要的帮助信息. 

-i 输出系统调用的入口指针. 

-q 禁止输出关于脱离的消息. 

-r 打印出相对时间关于,,每一个系统调用. 

-t 在输出中的每一行前加上时间信息. 

-tt 在输出中的每一行前加上时间信息,微秒级. 

-ttt 微秒级输出,以秒了表示时间. 

-T 显示每一调用所耗的时间. 

-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出. 

-V 输出strace的版本信息. 

-x 以十六进制形式输出非标准字符串 

-xx 所有字符串以十六进制形式输出. 

-a column 
设置返回值的输出位置.默认 为40. 


-e expr 
指定一个表达式,用来控制如何跟踪.格式如下: 
[qualifier=][!]value1[,value2]... 
qualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如: 

-eopen等价于 -e trace=open,表示只跟踪open调用.而
-etrace!=open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. 
注意有些shell使用!来执行历史记录里的命令,所以要使用\\. 

-e trace=set 
只跟踪指定的系统 调用.例如:
-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all. 
-e trace=file 
只跟踪有关文件操作的系统调用. 

-e trace=process 
只跟踪有关进程控制的系统调用. 

-e trace=network 
跟踪与网络有关的所有系统调用. 

-e strace=signal 
跟踪所有与系统信号有关的 系统调用 

-e trace=ipc 
跟踪所有与进程通讯有关的系统调用 

-e abbrev=set 
设定 strace输出的系统调用的结果集.
-v 等与 abbrev=none.默认为abbrev=all. 

-e raw=set 
将指 定的系统调用的参数以十六进制显示. 

-e signal=set 
指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号. 

-e read=set 
输出从指定文件中读出 的数据.例如: 
-e read=3,5 

-e write=set 
输出写入到指定文件中的数据. 

-o filename 
将strace的输出写入文件filename 

-p pid 
跟踪指定的进程pid. 

-s strsize 
指定输出的字符串的最大长度.默认为32.文件名一直全部输出. 

-u username 
以username 的UID和GID执行被跟踪的命令





命令

实例
strace -o output.txt -T -tt -e trace=all -p 28979
跟踪28979进程的所有系统调用（-e trace=all），并统计系统调用的花费时间，以及开始时间（并以可视化的时分秒格式显示），最后
将记录结果存在output.txt文件里面。



命令
strace -f -F -o ~/dcop-strace.txt dcopserver
 
-f -F选项告诉strace同时跟踪fork和vfork出来的进程，-o选项把所有strace输出写到~/dcop-strace.txt里 面，dcopserver是要启动和调试的程序。


dcop-strace.txt文件内容

27207 mkdir("/tmp/.ICE-unix", 0777) = -1 EEXIST (File exists)
27207 lstat64("/tmp/.ICE-unix", {st_mode=S_IFDIR|S_ISVTX|0755, st_size=4096, ...}) = 0
27207 unlink("/tmp/.ICE-unix/dcop27207-1066844596") = -1 ENOENT (No such file or directory)
27207 bind(3, {sin_family=AF_UNIX, path="/tmp/.ICE-unix/dcop27207-1066844596"}, 38) = -1 EACCES (Permission denied) 
27207 write(2, "_KDE_IceTrans", 13) = 13
27207 write(2, "SocketCreateListener: failed to "..., 46) = 46
27207 close(3) = 0 27207 write(2, "_KDE_IceTrans", 13) = 13
27207 write(2, "SocketUNIXCreateListener: ...Soc"..., 59) = 59
27207 umask(0) = 0 27207 write(2, "_KDE_IceTrans", 13) = 13
27207 write(2, "MakeAllCOTSServerListeners: fail"..., 64) = 64
27207 write(2, "Cannot establish any listening s"..., 39) = 39


分析
其中第一行显示程序试图创建/tmp/.ICE-unix目录，权限为0777，这个操作因为目录已经存在而失败了。
第二个系统调用（lstat64）检查 了目录状态，并显示这个目录的权限是0755，这里出现了第一个程序运行错误的线索：程序试图创建属性为0777的目录，但是已经存在了一个属性为 0755的目录。
第三个系统调用（unlink）试图删除一个文件，但是这个文件并不存在。这并不奇怪，因为这个操作只是试图删掉可能存在的老文件。

但是，第四行确认了错误所在。他试图绑定到/tmp/.ICE-unix/dcop27207-1066844596，但是出现了拒绝访问错误。. ICE_unix目录的用户和组都是root，并且只有所有者具有写权限。一个非root用户无法在这个目录下面建立文件，如果把目录属性改成0777， 则前面的操作有可能可以执行，而这正是第一步错误出现时进行过的操作。



strace -o whoami-strace.txt whoami







实例二
Linux 操作系统有很多用来跟踪程序行为的工具，内核态的函数调用跟踪用「strace」，用户态的函数调用跟踪用「ltrace」，所以这里我们应该用「strace」：
 strace -p <PID>
不过如果直接用 strace 跟踪某个进程的话，那么等待你的往往是满屏翻滚的字符，想从这里看出问题的症结并不是一件容易的事情，
好在 strace  可以按操作汇总时间：
strace -cp <PID>
通过「c」选项用来汇总各个操作的总耗时
，
我们能看到 CPU 主要被 clone 操作消耗了，还可以单独跟踪一下 clone：
 strace -T -e clone -p <PID>
通过「T」选项可以获取操作实际消耗的时间，通过「e」选项可以跟踪某个操作：


